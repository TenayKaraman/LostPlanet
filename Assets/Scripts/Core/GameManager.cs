// Auto-generated by ChatGPT on 2025-10-15
using UnityEngine;
using System.Collections;
using LostPlanet.GridSystem;
using LostPlanet.Managers;
using LostPlanet.UI;

namespace LostPlanet.Core
{
    public enum GameState { Boot, MainMenu, LoadingLevel, Playing, Paused, LevelComplete, GameOver }

    public class GameManager : MonoBehaviour
    {
        public static GameManager Instance { get; private set; }

        public GameState State { get; private set; } = GameState.Boot;

        [Header("Managers (Assign in scene or by AutoTestSceneBootstrap)")]
        public GridManager GridManager;
        public CrystalManager CrystalManager;
        public LifeManager LifeManager;
        public SaveManager SaveManager;
        public UIManager UIManager;
        public AudioManager AudioManager;

        [Header("Prefabs")]
        public GameObject PlayerPrefab;

        [Header("Level")]
        public int CurrentLevelId = 1;
        public Transform LevelRoot;

        private GameObject _player;
        private UIFader _fader;

        void Awake()
        {
            if (Instance != null && Instance != this) { Destroy(gameObject); return; }
            Instance = this;
            DontDestroyOnLoad(gameObject);
        }

        void Start()
        {
            // Bootstrap referanslarý sahnede baðlamadýysa dýþarýdan Init/StartLevel bekle.
            if (UIManager == null || GridManager == null)
            {
                Debug.Log("[GameManager] Waiting for bootstrap to call Init() / StartLevel...");
                return;
            }
        }

        /// <summary>
        /// Tüm yöneticileri baðlar ve UI’yý baþlangýçta günceller.
        /// AutoTestSceneBootstrap.Init() tarafýndan çaðrýlýr.
        /// </summary>
        public void Init()
        {
            // --- Eksik referanslarý sahneden tamamla
            if (!UIManager) UIManager = FindObjectOfType<UIManager>();
            if (!SaveManager) SaveManager = FindObjectOfType<SaveManager>();
            if (!LifeManager) LifeManager = FindObjectOfType<LifeManager>();
            if (!CrystalManager) CrystalManager = FindObjectOfType<CrystalManager>();
            if (!GridManager) GridManager = FindObjectOfType<GridManager>();
            if (!AudioManager) AudioManager = FindObjectOfType<AudioManager>();

            // --- Alt yöneticilerin Init’leri
            SaveManager?.Init();
            AudioManager?.Init();

            // --- UIFader kur (varsa bul, yoksa yarat)
            if (_fader == null)
            {
                _fader = FindObjectOfType<UIFader>();
                if (_fader == null)
                {
                    var go = new GameObject("UIFader");
                    _fader = go.AddComponent<UIFader>();
                    DontDestroyOnLoad(go);
                }
            }

            // *** ÖNCE UI temizle (placeholder’lar) ***
            UIManager?.Init();

            // --- Life baðlarý + kayýttan yükle (UI burada doðru dolsun)
            if (LifeManager)
            {
                if (!LifeManager.save) LifeManager.save = SaveManager;
                if (!LifeManager.ui) LifeManager.ui = UIManager;
                LifeManager.InitFromSave(); // TopBar’daki "x N" anýnda güncellenir
            }

            // --- Kristal sayacý baþlangýcý
            if (CrystalManager)
            {
                CrystalManager.ui = UIManager;
                UIManager?.UpdateCrystalUI("Crystal",
                    CrystalManager.collectedTotal,
                    CrystalManager.requiredTotal);
            }
            else
            {
                UIManager?.UpdateCrystalUI("Crystal", 0, 0);
            }

            // --- Level adý
            UIManager?.SetLevelName($"Level {CurrentLevelId}");

            SetState(GameState.MainMenu); // Ýstersen burada MainMenu göster, yoksa doðrudan StartLevel çaðýr
        }

        public void SetState(GameState s) => State = s;

        public void StartLevel(int levelId)
        {
            StartCoroutine(CoStartLevel(levelId));
        }

        IEnumerator CoStartLevel(int levelId)
        {
            UIManager?.SetLevelName($"Level {levelId}");
            SetState(GameState.LoadingLevel);
            yield return null;

            // Grid’i hazýrla (sahneden kurulum kullanýyorsan)
            GridManager?.BuildFromScene();

            // Life & Kristal senkron (UI ile)
            LifeManager?.RefillByElapsedTime(forceUI: true);
            CrystalManager?.InitLevelRequirements(); // örn. requiredTotal vb.

            // HUD baðlama
            UIManager?.BindLevelHUD();

            // Oyuncu doður
            var spawn = GameObject.FindWithTag("PlayerSpawn");
            Vector3 pos = spawn ? spawn.transform.position : Vector3.zero;

            if (!PlayerPrefab)
            {
                Debug.LogError("[GameManager] PlayerPrefab is missing!");
            }
            else
            {
                if (_player) Destroy(_player);
                _player = Instantiate(PlayerPrefab, pos, Quaternion.identity, LevelRoot);
                _player.SetActive(true);
            }

            CurrentLevelId = levelId;
            SetState(GameState.Playing);
        }

        public void PauseGame()
        {
            if (State != GameState.Playing) return;
            Time.timeScale = 0f;
            SetState(GameState.Paused);
            UIManager?.ShowPause();
        }

        public void ResumeGame()
        {
            if (State != GameState.Paused) return;
            Time.timeScale = 1f;
            SetState(GameState.Playing);
            UIManager?.HidePause();
        }

        public void RestartLevel()
        {
            if (LifeManager != null && LifeManager.Consume(1))
                StartLevel(CurrentLevelId);
            else
                UIManager?.ShowNoLifeOptions();
        }

        public void OnLevelComplete()
        {
            // Donuk kalsýn (butonlar basýlamasýn, hareket olmasýn)
            Time.timeScale = 0f;

            SetState(GameState.LevelComplete);
            SaveManager?.MarkCompleted(CurrentLevelId);
            UIManager?.ShowLevelComplete();

            // (Ýstersen) slot butonlarýný pasifle:
            // UIManager?.SetSlotsInteractable(false); // UIManager'da bu yardýmcý varsa
        }


        public void OnPlayerDeath()
        {
            SetState(GameState.GameOver);
            if (LifeManager != null && LifeManager.CanConsume(1))
            {
                LifeManager.Consume(1);
                UIManager?.ShowRetry();
            }
            else
            {
                UIManager?.ShowNoLifeOptions();
            }
        }

        // ---------- Fade'li level geçiþi (Portal vb. için) ----------
        public void LoadNextLevelWithFade(float fadeDuration = 0.5f)
        {
            StartCoroutine(CoLoadNextLevelWithFade(fadeDuration));
        }

        IEnumerator CoLoadNextLevelWithFade(float fadeDuration)
        {
            if (_fader) yield return _fader.FadeTo(1f, fadeDuration); // karart
            CurrentLevelId += 1;
            yield return null; // bir frame býrak
            StartLevel(CurrentLevelId);
            // Ýsteðe baðlý: bir frame sonra aç
            yield return null;
            if (_fader) yield return _fader.FadeTo(0f, fadeDuration); // aç
        }
    }
}
